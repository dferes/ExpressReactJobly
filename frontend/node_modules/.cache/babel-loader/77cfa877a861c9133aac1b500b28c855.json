{"ast":null,"code":"var _jsxFileName = \"/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/CompanyDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Job from './Job';\nimport { useParams, useHistory } from 'react-router-dom';\nimport JoblyApi from './api';\nimport './CompanyDetails.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompanyDetails = ({\n  isLoggedIn\n}) => {\n  _s();\n\n  const history = useHistory();\n  if (!isLoggedIn) history.push('/');\n  const [company, setCompany] = useState({});\n  const [readyToRender, setReadyToRender] = useState(false);\n  const [noCompanyFound, setNoCompanyFound] = useState(false);\n  const {\n    handle\n  } = useParams();\n  useEffect(() => {\n    const getCompanyJobs = async () => {\n      try {\n        const company = await JoblyApi.getCompany(handle);\n        setCompany(company);\n        setReadyToRender(true);\n      } catch (err) {\n        console.log('Error: ', err);\n        setNoCompanyFound(true);\n      }\n    };\n\n    getCompanyJobs();\n  }, [handle]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"company-jobs-div\",\n    children: [readyToRender && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"company-details-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"company-details-title\",\n        children: company.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"company-details-description\",\n        children: company.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), readyToRender && company.jobs.map(job => /*#__PURE__*/_jsxDEV(Job, {\n      id: job.id,\n      title: job.title,\n      companyHandle: company.handle,\n      salary: job.salary,\n      equity: job.equity,\n      isLoggedIn: isLoggedIn\n    }, job.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)), noCompanyFound && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"No Company found with handle: \", handle, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CompanyDetails, \"nRWVGFPMA/VT8C33/s98tC3fE0k=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CompanyDetails;\nexport default CompanyDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyDetails\");","map":{"version":3,"sources":["/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/CompanyDetails.js"],"names":["React","useEffect","useState","Job","useParams","useHistory","JoblyApi","CompanyDetails","isLoggedIn","history","push","company","setCompany","readyToRender","setReadyToRender","noCompanyFound","setNoCompanyFound","handle","getCompanyJobs","getCompany","err","console","log","name","description","jobs","map","job","id","title","salary","equity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAO,sBAAP;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAAA;;AACzC,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AACA,MAAG,CAACG,UAAJ,EAAgBC,OAAO,CAACC,IAAR,CAAa,GAAb;AAEhB,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAEW,aAAF,EAAiBC,gBAAjB,IAAsCZ,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAEa,cAAF,EAAkBC,iBAAlB,IAAwCd,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAab,SAAS,EAA5B;AAEAH,EAAAA,SAAS,CAAE,MAAM;AACf,UAAMiB,cAAc,GAAG,YAAY;AACjC,UAAI;AACF,cAAMP,OAAO,GAAG,MAAML,QAAQ,CAACa,UAAT,CAAoBF,MAApB,CAAtB;AACAL,QAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,OAJD,CAIC,OAAMM,GAAN,EAAW;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACAJ,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF,KATD;;AAWAE,IAAAA,cAAc;AACf,GAbQ,EAaN,CAACD,MAAD,CAbM,CAAT;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,eACIJ,aAAa,iBACb;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,uBAAd;AAAA,kBAAuCF,OAAO,CAACY;AAA/C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC,6BAAb;AAAA,kBAA4CZ,OAAO,CAACa;AAApD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAOIX,aAAa,IAAIF,OAAO,CAACc,IAAR,CAAaC,GAAb,CAAkBC,GAAG,iBACtC,QAAC,GAAD;AAEE,MAAA,EAAE,EAAEA,GAAG,CAACC,EAFV;AAGE,MAAA,KAAK,EAAED,GAAG,CAACE,KAHb;AAIE,MAAA,aAAa,EAAElB,OAAO,CAACM,MAJzB;AAKE,MAAA,MAAM,EAAEU,GAAG,CAACG,MALd;AAME,MAAA,MAAM,EAAEH,GAAG,CAACI,MANd;AAOE,MAAA,UAAU,EAAEvB;AAPd,OACOmB,GAAG,CAACC,EADX;AAAA;AAAA;AAAA;AAAA,YADiB,CAPrB,EAkBKb,cAAc,iBACf;AAAA,6BACE;AAAA,qDAAmCE,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAlDD;;GAAMV,c;UACYF,U,EAMGD,S;;;KAPfG,c;AAoDN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Job from './Job';\nimport { useParams, useHistory } from 'react-router-dom';\nimport JoblyApi from './api';\nimport './CompanyDetails.css';\n\nconst CompanyDetails = ({ isLoggedIn }) => {\n  const history = useHistory();\n  if(!isLoggedIn) history.push('/');\n\n  const [ company, setCompany ] = useState({});\n  const [ readyToRender, setReadyToRender ] = useState(false);\n  const [ noCompanyFound, setNoCompanyFound ] = useState(false);\n  const { handle } = useParams();\n  \n  useEffect( () => {\n    const getCompanyJobs = async () => {\n      try {\n        const company = await JoblyApi.getCompany(handle);\n        setCompany(company);\n        setReadyToRender(true);\n      }catch(err) {\n        console.log('Error: ', err);\n        setNoCompanyFound(true);\n      }\n    };\n    \n    getCompanyJobs();\n  }, [handle]);\n  \n  return (\n    <div className='company-jobs-div'>\n      { readyToRender && \n        <div className='company-details-div'>\n          <h4 className='company-details-title'>{company.name}</h4>\n          <p className='company-details-description'>{company.description}</p>\n        </div>  \n      }  \n      { readyToRender && company.jobs.map( job => (\n        <Job \n          key={job.id}\n          id={job.id}\n          title={job.title}\n          companyHandle={company.handle}\n          salary={job.salary}\n          equity={job.equity}\n          isLoggedIn={isLoggedIn}\n        />  \n      ))}\n      {  noCompanyFound && \n        <div>\n          <h3>No Company found with handle: {handle} </h3>\n       </div> \n      }\n    </div>\n  );  \n};\n\nexport default CompanyDetails;"]},"metadata":{},"sourceType":"module"}