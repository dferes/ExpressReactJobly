{"ast":null,"code":"var _jsxFileName = \"/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Routes from './Routes';\nimport JoblyApi from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const emptyUserData = {\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    isAdmin: '',\n    applications: []\n  };\n  const [companies, setCompanies] = useState([]);\n  const [jobs, setJobs] = useState([]);\n  const [formData, setFormData] = useState({\n    username: '',\n    password: ''\n  });\n  const [signupFormData, setSignupFormData] = useState(emptyUserData);\n  const [errorMessage, setErrorMessage] = useState({\n    login: '',\n    signup: ''\n  });\n  const [userToken, setUserToken] = useState('');\n  const [user, setUser] = useState(emptyUserData);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const getCompanies = async () => {\n      const allCompanies = await JoblyApi.getAllCompanies();\n      setCompanies(allCompanies);\n    };\n\n    const getJobs = async () => {\n      const allJobs = await JoblyApi.getAllJobs();\n      setJobs(allJobs);\n    };\n\n    getCompanies();\n    getJobs();\n  }, []);\n  useEffect(() => {\n    const logout = () => {\n      setUserToken('');\n      JoblyApi.setToken('');\n      setUser({\n        username: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        isAdmin: '',\n        applications: []\n      });\n    };\n\n    if (!isLoggedIn) logout();\n  }, [isLoggedIn]);\n\n  const setUserInfo = user => {\n    setUser({\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      applications: user.applications\n    });\n  };\n\n  const resetFormData = apiMethod => {\n    if (apiMethod === 'logIn') setFormData({\n      username: '',\n      password: ''\n    });else setSignupFormData({\n      username: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n      email: ''\n    });\n  };\n\n  const handleFormChange = (evt, login = false) => {\n    const {\n      name,\n      value\n    } = evt.target;\n    if (login) setFormData(data => ({ ...data,\n      [name]: value\n    }));else setSignupFormData(data => ({ ...data,\n      [name]: value\n    }));\n  };\n\n  const handleFormSubmit = async (evt, apiMethod, formInfo) => {\n    evt.preventDefault();\n\n    try {\n      let token = await JoblyApi[[apiMethod]](formInfo);\n      setUserToken(token);\n      const user_ = await JoblyApi.getUser(formInfo.username);\n      setUserInfo(user_);\n      setErrorMessage({\n        login: '',\n        signup: ''\n      });\n      resetFormData(apiMethod);\n      setIsLoggedIn(true);\n    } catch (err) {\n      if (apiMethod === 'logIn') setErrorMessage({\n        login: err,\n        signup: ''\n      });else setErrorMessage({\n        login: '',\n        signup: err\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        userToken: userToken,\n        setIsLoggedIn: setIsLoggedIn,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          companies: companies,\n          jobs: jobs,\n          handleFormChange: handleFormChange,\n          handleFormSubmit: handleFormSubmit,\n          userToken: userToken,\n          user: user,\n          formData: formData,\n          signupFormData: signupFormData,\n          errorMessage: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Zf1ncZ1dxScNjRLr8Qbpu9z+pmY=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","NavBar","Routes","JoblyApi","App","emptyUserData","username","firstName","lastName","email","isAdmin","applications","companies","setCompanies","jobs","setJobs","formData","setFormData","password","signupFormData","setSignupFormData","errorMessage","setErrorMessage","login","signup","userToken","setUserToken","user","setUser","isLoggedIn","setIsLoggedIn","getCompanies","allCompanies","getAllCompanies","getJobs","allJobs","getAllJobs","logout","setToken","setUserInfo","resetFormData","apiMethod","handleFormChange","evt","name","value","target","data","handleFormSubmit","formInfo","preventDefault","token","user_","getUser","err"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Routes from './Routes';\nimport JoblyApi from './api';\n\nfunction App() {\n  const emptyUserData = {username: '', firstName: '', lastName: '', email: '', isAdmin: '', applications: []};\n  const [ companies, setCompanies ] = useState([]);\n  const [ jobs, setJobs ] = useState([]);\n\n  const [ formData, setFormData ] = useState({ username: '', password: ''});\n  const [ signupFormData, setSignupFormData ] = useState( emptyUserData );\n  const [ errorMessage, setErrorMessage ] = useState({ login: '', signup: ''});\n  \n  const [ userToken, setUserToken ] = useState('');\n  const [ user, setUser ] = useState( emptyUserData );\n  const [ isLoggedIn, setIsLoggedIn ] = useState(false);\n  \n\n  useEffect( () => {\n    const getCompanies = async () => {\n      const allCompanies = await JoblyApi.getAllCompanies();\n      setCompanies(allCompanies);\n    }\n\n    const getJobs = async () => {\n      const allJobs = await JoblyApi.getAllJobs();\n      setJobs(allJobs);\n    }\n\n    getCompanies();\n    getJobs();\n  }, []);\n\n\n  useEffect( () => {\n    const logout = () => {\n      setUserToken('');\n      JoblyApi.setToken('');\n      setUser({username:'', firstName:'', lastName:'', email:'', isAdmin:'', applications:[]});\n    };\n\n    if (!isLoggedIn) logout();\n  }, [isLoggedIn]);\n\n\n\n  const setUserInfo = user => {\n    setUser({\n      username:     user.username,\n      firstName:    user.firstName,\n      lastName:     user.lastName,\n      email:        user.email,\n      isAdmin:      user.isAdmin,\n      applications: user.applications\n    });\n  }\n\n  const resetFormData = (apiMethod) => {\n    if(apiMethod === 'logIn') setFormData( { username: '', password: ''} );\n    else setSignupFormData( {username: '', password: '', firstName:'', lastName: '', email: ''});\n  };\n\n  const handleFormChange = (evt, login=false) => {\n    const { name, value } = evt.target;\n    if (login) setFormData( data => ({...data, [name]: value}));\n    else setSignupFormData(data => ({...data, [name]: value}))\n  };\n\n  const handleFormSubmit = async (evt, apiMethod, formInfo) => {\n    evt.preventDefault();\n    try {\n      let token = await JoblyApi[ [apiMethod] ](formInfo);\n      setUserToken(token);\n      const user_ = await JoblyApi.getUser(formInfo.username);\n      setUserInfo(user_);\n      setErrorMessage({ login: '', signup: '' });\n      resetFormData(apiMethod);\n      setIsLoggedIn(true);\n    }catch(err) {\n      if (apiMethod === 'logIn') setErrorMessage({login: err, signup: ''});\n      else setErrorMessage({login: '', signup: err});\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar \n          userToken={userToken} \n          setIsLoggedIn={setIsLoggedIn}\n          user={user} \n        />\n        <main>\n          <Routes \n            companies={companies} \n            jobs={jobs} \n            handleFormChange={handleFormChange}\n            handleFormSubmit={handleFormSubmit}\n            userToken={userToken}\n            user={user}\n            formData={formData}\n            signupFormData={signupFormData}\n            errorMessage={errorMessage}\n          />\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}