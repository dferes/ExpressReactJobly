{"ast":null,"code":"var _jsxFileName = \"/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Routes from './Routes';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport JoblyApi from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const emptyUserData = {\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    isAdmin: '',\n    applications: []\n  };\n  const [companies, setCompanies] = useState([]);\n  const [jobs, setJobs] = useState([]);\n  const [loginFormData, setLoginFormData] = useState({\n    username: '',\n    password: ''\n  });\n  const [signupFormData, setSignupFormData] = useState(emptyUserData);\n  const [userFormData, setUserFormData] = useState({});\n  const [errorMessage, setErrorMessage] = useState({\n    logIn: null,\n    signup: null,\n    update: null\n  });\n  const [userToken, setUserToken] = useLocalStorage('userToken', '');\n  const [user, setUser] = useLocalStorage('user', emptyUserData);\n  const [isLoggedIn, setIsLoggedIn] = useLocalStorage('isLoggedIn', false);\n  /** Retrieves a list of all companies and all jobs on first render */\n\n  useEffect(() => {\n    const getCompanies = async () => {\n      const allCompanies = await JoblyApi.getAllCompanies();\n      setCompanies(allCompanies);\n    };\n\n    const getJobs = async () => {\n      const allJobs = await JoblyApi.getAllJobs();\n      setJobs(allJobs);\n    };\n\n    getCompanies();\n    getJobs();\n  }, []);\n  /** Logs the user out if isLoggedIn changes to false */\n\n  useEffect(() => {\n    const logout = () => {\n      setUserToken('');\n      setUser({});\n    };\n\n    if (!isLoggedIn) logout();\n  }, [isLoggedIn, setUserToken, setUser]);\n\n  const setUserInfo = user => {\n    setUser({\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      applications: user.applications\n    });\n  };\n\n  const resetFormData = () => {\n    setLoginFormData({});\n    setSignupFormData({});\n    setUserFormData({});\n  };\n\n  const handleFormChange = (evt, login = false, signup = false) => {\n    const {\n      name,\n      value\n    } = evt.target;\n    if (login) setLoginFormData(data => ({ ...data,\n      [name]: value\n    }));else if (signup) setSignupFormData(data => ({ ...data,\n      [name]: value\n    }));else setUserFormData(data => ({ ...data,\n      [name]: value\n    }));\n  };\n\n  const handleFormSubmit = async (evt, apiMethod, formInfo) => {\n    evt.preventDefault();\n\n    try {\n      if (['logIn', 'submit'].includes(apiMethod)) {\n        const token = await JoblyApi[[apiMethod]](formInfo);\n        setUserToken(token);\n      } else {\n        JoblyApi.setToken(userToken);\n        await JoblyApi[[apiMethod]](formInfo);\n      }\n\n      const user_ = await JoblyApi.getUser(formInfo.username);\n      setUserInfo(user_);\n      resetFormData();\n      setErrorMessage({\n        login: null,\n        signup: null,\n        update: null\n      });\n      setIsLoggedIn(true);\n    } catch (err) {\n      setErrorMessage({\n        [apiMethod]: err\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        isLoggedIn: isLoggedIn,\n        setIsLoggedIn: setIsLoggedIn,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          companies: companies,\n          jobs: jobs,\n          handleFormChange: handleFormChange,\n          handleFormSubmit: handleFormSubmit,\n          userToken: userToken,\n          isLoggedIn: isLoggedIn,\n          user: user,\n          loginFormData: loginFormData,\n          signupFormData: signupFormData,\n          userFormData: userFormData,\n          errorMessage: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2JdCNfWuOxLJZDBwjg+a1tS83CU=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage];\n});\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","NavBar","Routes","useLocalStorage","JoblyApi","App","emptyUserData","username","firstName","lastName","email","isAdmin","applications","companies","setCompanies","jobs","setJobs","loginFormData","setLoginFormData","password","signupFormData","setSignupFormData","userFormData","setUserFormData","errorMessage","setErrorMessage","logIn","signup","update","userToken","setUserToken","user","setUser","isLoggedIn","setIsLoggedIn","getCompanies","allCompanies","getAllCompanies","getJobs","allJobs","getAllJobs","logout","setUserInfo","resetFormData","handleFormChange","evt","login","name","value","target","data","handleFormSubmit","apiMethod","formInfo","preventDefault","includes","token","setToken","user_","getUser","err"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Routes from './Routes';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport JoblyApi from './api';\n\n\nfunction App() {\n  const emptyUserData = {username: '', firstName: '', lastName: '', email: '', isAdmin: '', applications: []};\n  const [ companies, setCompanies ] = useState([]);\n  const [ jobs, setJobs ] = useState([]);\n\n  const [ loginFormData, setLoginFormData ] = useState({ username: '', password: ''});\n  const [ signupFormData, setSignupFormData ] = useState( emptyUserData );\n  const [ userFormData, setUserFormData ] = useState({});\n  const [ errorMessage, setErrorMessage ] = useState({ logIn: null, signup: null, update: null});\n  \n  const [ userToken, setUserToken ] = useLocalStorage('userToken', '');\n  const [ user, setUser ] = useLocalStorage('user',  emptyUserData );\n  const [ isLoggedIn, setIsLoggedIn ] = useLocalStorage('isLoggedIn', false);\n  \n /** Retrieves a list of all companies and all jobs on first render */\n  useEffect( () => {\n    const getCompanies = async () => {\n      const allCompanies = await JoblyApi.getAllCompanies();\n      setCompanies(allCompanies);\n    };\n\n    const getJobs = async () => {\n      const allJobs = await JoblyApi.getAllJobs();\n      setJobs(allJobs);\n    };\n    \n    getCompanies();\n    getJobs();\n  }, []);\n\n  /** Logs the user out if isLoggedIn changes to false */\n  useEffect( () => {\n    const logout = () => {\n      setUserToken('');\n      setUser({});\n    };\n\n    if (!isLoggedIn) logout();\n  }, [isLoggedIn, setUserToken, setUser]);\n\n\n\n  const setUserInfo = user => {\n    setUser({\n      username:     user.username,\n      firstName:    user.firstName,\n      lastName:     user.lastName,\n      email:        user.email,\n      isAdmin:      user.isAdmin,\n      applications: user.applications\n    });\n  };\n\n  const resetFormData = () => {\n    setLoginFormData({});\n    setSignupFormData({});\n    setUserFormData({});\n  };\n\n  const handleFormChange = (evt, login=false, signup=false) => {\n    const { name, value } = evt.target;\n    if (login) setLoginFormData( data => ({...data, [name]: value}) );\n    else if(signup)setSignupFormData( data => ({...data, [name]: value}) );\n    else setUserFormData( data => ({...data, [name]: value}) );\n  };\n\n  const handleFormSubmit = async (evt, apiMethod, formInfo) => {\n    evt.preventDefault();\n    try {\n      if(['logIn', 'submit'].includes(apiMethod)){\n        const token = await JoblyApi[ [apiMethod] ](formInfo);\n        setUserToken(token);\n      }else {\n        JoblyApi.setToken(userToken);\n        await JoblyApi[ [apiMethod] ](formInfo);\n      }\n      const user_ = await JoblyApi.getUser(formInfo.username);\n      setUserInfo(user_);\n      resetFormData();\n      setErrorMessage({ login: null, signup: null, update: null });\n      setIsLoggedIn(true);\n    }catch(err) { setErrorMessage({ [apiMethod]: err }); }\n  };\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar \n          isLoggedIn={isLoggedIn} \n          setIsLoggedIn={setIsLoggedIn}\n          user={user} \n        />\n        <main>\n          <Routes \n            companies={companies} \n            jobs={jobs} \n            handleFormChange={handleFormChange}\n            handleFormSubmit={handleFormSubmit}\n            userToken={userToken}\n            isLoggedIn={isLoggedIn}\n            user={user}\n            loginFormData={loginFormData}\n            signupFormData={signupFormData}\n            userFormData={userFormData}\n            errorMessage={errorMessage}\n          />\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}