{"ast":null,"code":"var _jsxFileName = \"/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Routes from './Routes';\nimport JoblyApi from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [companies, setCompanies] = useState([]);\n  const [jobs, setJobs] = useState([]);\n  const [userToken, setUserToken] = useState('');\n  const [user, setUser] = useState({\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    isAdmin: '',\n    applications: []\n  });\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Combine state for userToken and user by putting the token in the user info\n\n  const [formData, setFormData] = useState({\n    username: '',\n    password: ''\n  });\n  const [validCredentials, setValidCredentials] = useState(true);\n  const [signupFormData, setSignupFormData] = useState({\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: ''\n  });\n  useEffect(() => {\n    const getCompanies = async () => {\n      const allCompanies = await JoblyApi.getAllCompanies();\n      setCompanies(allCompanies);\n    };\n\n    const getJobs = async () => {\n      const allJobs = await JoblyApi.getAllJobs();\n      setJobs(allJobs);\n    };\n\n    getCompanies(); // await for these 2??\n\n    getJobs();\n  }, []);\n  useEffect(() => {\n    const logout = () => {\n      setUserToken('');\n      setUser({\n        username: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        isAdmin: '',\n        applications: []\n      });\n    };\n\n    if (!isLoggedIn) logout();\n  }, [isLoggedIn]);\n\n  const setUserInfo = user => {\n    setUser({\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      applications: user.applications\n    });\n  }; //  Refactor the 4 functions below into 2, pass the type of form data aswell as\n  //  the api methhod as a string\n\n\n  const handleLoginChange = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setFormData(data => ({ ...data,\n      [name]: value\n    }));\n  };\n\n  const handleLoginSubmit = async evt => {\n    evt.preventDefault();\n\n    try {\n      let token = await JoblyApi.logIn(formData);\n      setUserToken(token);\n      setValidCredentials(true);\n      const user = await JoblyApi.getUser(formData.username);\n      setUserInfo(user);\n      setIsLoggedIn(true);\n    } catch (err) {\n      setValidCredentials(false);\n    }\n  };\n\n  const handleSignupChange = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setSignupFormData(data => ({ ...data,\n      [name]: value\n    }));\n  };\n\n  const handleSignupSubmit = async evt => {\n    evt.preventDefault();\n\n    try {\n      const token = await JoblyApi.signup(signupFormData);\n      setUserToken(token);\n      setValidCredentials(true);\n      const user = await JoblyApi.getUser(formData.username);\n      setUserInfo(user);\n      setIsLoggedIn(true);\n    } catch (err) {\n      setValidCredentials(false);\n      console.log('The Error: -->', err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        userToken: userToken,\n        setIsLoggedIn: setIsLoggedIn,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          companies: companies,\n          jobs: jobs,\n          handleLoginChange: handleLoginChange,\n          handleLoginSubmit: handleLoginSubmit,\n          userToken: userToken,\n          user: user,\n          formData: formData,\n          validCredentials: validCredentials,\n          signupFormData: signupFormData,\n          handleSignupChange: handleSignupChange,\n          handleSignupSubmit: handleSignupSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QZ8cas5VCrmPitUQPvaCEQRxSzM=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","NavBar","Routes","JoblyApi","App","companies","setCompanies","jobs","setJobs","userToken","setUserToken","user","setUser","username","firstName","lastName","email","isAdmin","applications","isLoggedIn","setIsLoggedIn","formData","setFormData","password","validCredentials","setValidCredentials","signupFormData","setSignupFormData","getCompanies","allCompanies","getAllCompanies","getJobs","allJobs","getAllJobs","logout","setUserInfo","handleLoginChange","evt","name","value","target","data","handleLoginSubmit","preventDefault","token","logIn","getUser","err","handleSignupChange","handleSignupSubmit","signup","console","log"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Routes from './Routes';\nimport JoblyApi from './api';\n\nfunction App() {\n  const [ companies, setCompanies ] = useState([]);\n  const [ jobs, setJobs ] = useState([]);\n  const [ userToken, setUserToken ] = useState('');\n  const [ user, setUser ] = useState({username: '', firstName: '', lastName: '', email: '', isAdmin: '', applications: []});\n  const [ isLoggedIn, setIsLoggedIn ] = useState(false);\n  // Combine state for userToken and user by putting the token in the user info\n  const [ formData, setFormData ] = useState({ username: '', password: ''});\n  const [ validCredentials, setValidCredentials ] = useState(true);\n  const [ signupFormData, setSignupFormData ] = useState({username: '', password: '', firstName:'', lastName: '', email: ''});\n\n\n  useEffect( () => {\n    const getCompanies = async () => {\n      const allCompanies = await JoblyApi.getAllCompanies();\n      setCompanies(allCompanies);\n    }\n\n    const getJobs = async () => {\n      const allJobs = await JoblyApi.getAllJobs();\n      setJobs(allJobs);\n    }\n\n    getCompanies(); // await for these 2??\n    getJobs();\n  }, []);\n\n\n  useEffect( () => {\n    const logout = () => {\n      setUserToken('');\n      setUser({username:'', firstName:'', lastName:'', email:'', isAdmin:'', applications:[]});\n    };\n    \n    if (!isLoggedIn) logout();\n  }, [isLoggedIn]);\n\n\n\n  const setUserInfo = user => {\n    setUser({\n      username:     user.username,\n      firstName:    user.firstName,\n      lastName:     user.lastName,\n      email:        user.email,\n      isAdmin:      user.isAdmin,\n      applications: user.applications\n    });\n  }\n\n  //  Refactor the 4 functions below into 2, pass the type of form data aswell as\n  //  the api methhod as a string\n\n  const handleLoginChange = evt => {\n    const { name, value } = evt.target;\n    setFormData( data => ({...data, [name]: value}));\n  };\n\n  const handleLoginSubmit = async evt => {\n    evt.preventDefault();\n    try {\n      let token = await JoblyApi.logIn(formData);\n      setUserToken(token);\n      setValidCredentials(true);\n      \n      const user = await JoblyApi.getUser(formData.username);\n      setUserInfo(user);\n      setIsLoggedIn(true);\n    }catch(err) {\n      setValidCredentials(false);\n    }\n  };\n\n\n  \n  const handleSignupChange = evt => {\n    const { name, value } = evt.target;\n    setSignupFormData( data => ({...data, [name]: value}));\n  };\n\n  const handleSignupSubmit = async evt => {\n    evt.preventDefault();\n    try {\n      const token = await JoblyApi.signup(signupFormData);\n      setUserToken(token);\n      setValidCredentials(true);\n\n      const user = await JoblyApi.getUser(formData.username);\n      setUserInfo(user);\n      setIsLoggedIn(true);\n    }catch(err) {\n      setValidCredentials(false);\n      console.log('The Error: -->', err);\n    }\n  };\n\n\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar \n          userToken={userToken} \n          setIsLoggedIn={setIsLoggedIn}\n          user={user} \n        />\n        <main>\n          <Routes \n            companies={companies} \n            jobs={jobs} \n            handleLoginChange={handleLoginChange}\n            handleLoginSubmit={handleLoginSubmit}\n            userToken={userToken}\n            user={user}\n            formData={formData}\n            validCredentials={validCredentials}\n            signupFormData={signupFormData}\n            handleSignupChange={handleSignupChange}\n            handleSignupSubmit={handleSignupSubmit}\n          />\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}