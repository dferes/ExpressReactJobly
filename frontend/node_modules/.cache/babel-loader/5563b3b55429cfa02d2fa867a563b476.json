{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? // is this right??\n    data : {};\n\n    try {\n      console.log('PARAMS: ----->', params);\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n\n  static async logIn(username, password) {\n    console.log('In the api function logIn: ', password, username);\n    const data = {\n      username: username,\n      password: password\n    };\n    let res = await this.request('auth/token', data, 'post');\n    return res.token;\n  }\n  /** Get details on a company by handle. */\n\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n  /** Get details on either all companies or companies \n   *  that have a similar name to data.name **/\n\n\n  static async getAllCompanies(data = {}) {\n    let res = await this.request('companies/', data);\n    return res.companies;\n  }\n  /** Get details on a job by id */\n\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n  /** Get details on either all jobs or jobs \n  *  that have a similar title to data.title **/\n\n\n  static async getAllJobs(data = {}) {\n    let res = await this.request('jobs/', data);\n    return res.jobs;\n  }\n  /** Get details on a user by username */\n\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  } // obviously, you'll add a lot here ...\n\n\n} // for now, put token (\"testuser\" / \"password\" on class)\n\n\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"sources":["/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","log","err","error","response","message","Array","isArray","logIn","username","password","res","getCompany","handle","company","getAllCompanies","companies","getJob","id","job","getAllJobs","jobs","getUser","user"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\") // is this right??\n        ? data\n        : {};\n    try {\n      console.log('PARAMS: ----->', params);\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  static async logIn(username, password) {\n    console.log('In the api function logIn: ', password, username);\n    const data = {\n      username: username,\n      password: password\n    };\n    let res = await this.request(\n      'auth/token', \n      data,\n      'post'\n    );\n\n    return res.token;\n  }\n\n  /** Get details on a company by handle. */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get details on either all companies or companies \n   *  that have a similar name to data.name **/\n  static async getAllCompanies(data={}) {\n    let res = await this.request('companies/', data);\n    return res.companies;\n  }\n\n\n  /** Get details on a job by id */\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n\n  /** Get details on either all jobs or jobs \n  *  that have a similar title to data.title **/\n  static async getAllJobs(data={}) {\n    let res = await this.request('jobs/', data);\n    return res.jobs;\n  }\n\n  /** Get details on a user by username */\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n \n \n \n  // obviously, you'll add a lot here ...\n\n\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n\nexport default JoblyApi;"]},"metadata":{},"sourceType":"module"}