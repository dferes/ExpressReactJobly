{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    console.debug('The Current User Token Is: ', this.token);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${this.token}`\n    }; // const params = (method === \"get\") // wtf is this here?\n    //     ? data\n    //     : {};\n\n    const params = data;\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n\n  static async logIn(formData) {\n    const {\n      username,\n      password\n    } = formData;\n    const data = {\n      username: username,\n      password: password\n    };\n    let res = await this.request('auth/token', data, 'post');\n    this.token = res.token;\n    return res.token;\n  }\n\n  static async signup(formData) {\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      email\n    } = formData;\n    const data = {\n      username: username,\n      password: password,\n      firstName: firstName,\n      lastName: lastName,\n      email: email\n    };\n    let res = await this.request('auth/register', data, 'post');\n    this.token = res.token;\n    return res.token;\n  }\n  /** Get details on a company by handle. */\n\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n  /** Get details on either all companies or companies \n   *  that have a similar name to data.name **/\n\n\n  static async getAllCompanies(data = {}) {\n    let res = await this.request('companies/', data);\n    return res.companies;\n  }\n  /** Get details on a job by id */\n\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n  /** Get details on either all jobs or jobs \n  *  that have a similar title to data.title **/\n\n\n  static async getAllJobs(data = {}) {\n    let res = await this.request('jobs/', data);\n    return res.jobs;\n  }\n  /** Get details on a user by username */\n\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  } // obviously, you'll add a lot here ...\n\n\n} // for now, put token (\"testuser\" / \"password\" on class)\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//     \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//     \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n\nexport default JoblyApi;","map":{"version":3,"sources":["/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","token","url","headers","Authorization","params","err","error","response","message","Array","isArray","logIn","formData","username","password","res","signup","firstName","lastName","email","getCompany","handle","company","getAllCompanies","companies","getJob","id","job","getAllJobs","jobs","getUser","user"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    console.debug('The Current User Token Is: ', this.token);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${this.token}` };\n    // const params = (method === \"get\") // wtf is this here?\n    //     ? data\n    //     : {};\n    const params = data;\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  static async logIn(formData) {\n    const { username, password } = formData;\n    const data = {\n      username: username,\n      password: password\n    };\n \n    let res = await this.request(\n      'auth/token', \n      data,\n      'post'\n    );\n    \n    this.token = res.token\n    return res.token;\n  }\n\n  static async signup(formData){\n    const { username, password, firstName, lastName, email } = formData;\n    const data = {\n      username: username,\n      password: password,\n      firstName: firstName,\n      lastName: lastName, \n      email: email\n    };\n\n    let res = await this.request(\n      'auth/register',\n      data,\n      'post'\n    );\n\n    this.token = res.token\n    return res.token;\n  }\n\n  /** Get details on a company by handle. */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get details on either all companies or companies \n   *  that have a similar name to data.name **/\n  static async getAllCompanies(data={}) {\n    let res = await this.request('companies/', data);\n    return res.companies;\n  }\n\n\n  /** Get details on a job by id */\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n\n  /** Get details on either all jobs or jobs \n  *  that have a similar title to data.title **/\n  static async getAllJobs(data={}) {\n    let res = await this.request('jobs/', data);\n    return res.jobs;\n  }\n\n  /** Get details on a user by username */\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n \n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//     \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//     \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n    \n\n\nexport default JoblyApi;"]},"metadata":{},"sourceType":"module"}