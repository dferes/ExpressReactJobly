{"ast":null,"code":"import axios from \"axios\";\nimport cloneDeep from 'lodash/cloneDeep';\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${this.token}`\n    };\n    console.log('--------------------headers:', headers);\n    console.log('====================token: ', this.token); // const params = (method === \"get\")\n    //     ? data\n    //     : {};\n\n    const params = data;\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n  /** Checks user's username and the password passed with the \n   * form data and, if valid, returns a token signed with jwt.\n   * The payload is the username and password.\n   * Note that the token is also updated in this class.\n   */\n\n\n  static async logIn(formData) {\n    const {\n      username,\n      password\n    } = formData;\n    const data = {\n      username: username,\n      password: password\n    };\n    let res = await this.request('auth/token', data, 'post');\n    this.setToken(res.token);\n    return res.token;\n  }\n  /** If all data passed in formData is valid, a new user is created\n   *  and added to the database (the user table). A token is created \n   *  and signed with jwt. The payload is the username and password.\n   *  Note that the token is also updated in this class. \n  */\n\n\n  static async signup(formData) {\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      email\n    } = formData; // why did I do this?? Just pass formData...\n\n    const data = {\n      username: username,\n      password: password,\n      firstName: firstName,\n      lastName: lastName,\n      email: email\n    };\n    let res = await this.request('auth/register', data, 'post');\n    this.setToken(res.token);\n    return res.token;\n  }\n  /** Accepts { username, firstname, lastName, email, password }\n   *  and can update { firstName, lastName, email } in the database\n   *  and will return { firstName, lastName, email }. Only username\n   *  and password are required.\n   */\n\n\n  static async update(formData) {\n    // console.log('The formData Passed from user Profile: ', formData);\n    // check password in here, make function for this\n    const data = cloneDeep(formData); // console.log('The data 1: ', data);\n\n    delete data.username;\n    delete data.password; // console.log('The data 2: ', data);\n    // console.log('And noe fromData: ', formData);\n\n    let res = await this.request(`users/${formData.username}`, data, 'patch');\n    console.log('The response is: ', res.user);\n    return res.user;\n  }\n  /** Get details on a company by handle. */\n\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n  /** Get details on either all companies or companies \n   *  that have a similar name to data.name **/\n\n\n  static async getAllCompanies(data = {}) {\n    let res = await this.request('companies/', data);\n    return res.companies;\n  }\n  /** Get details on a job by id */\n\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n  /** Get details on either all jobs or jobs \n  *  that have a similar title to data.title **/\n\n\n  static async getAllJobs(data = {}) {\n    let res = await this.request('jobs/', data);\n    return res.jobs;\n  }\n  /** Get details on a user by username */\n\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n}\n\nJoblyApi.setToken = token_ => JoblyApi.token = token_;\n\nJoblyApi.getToken = () => JoblyApi.token;\n\nexport default JoblyApi;","map":{"version":3,"sources":["/home/__NORI__/Documents/Springboard/43/react_jobly/jobly/src/api.js"],"names":["axios","cloneDeep","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","log","params","err","error","response","message","Array","isArray","logIn","formData","username","password","res","setToken","signup","firstName","lastName","email","update","user","getCompany","handle","company","getAllCompanies","companies","getJob","id","job","getAllJobs","jobs","getUser","token_","getToken"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport cloneDeep from 'lodash/cloneDeep';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static setToken = (token_) => this.token = token_;\n\n  static getToken = () => this.token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${this.token}` };\n    console.log('--------------------headers:', headers);\n    console.log('====================token: ', this.token);\n    // const params = (method === \"get\")\n    //     ? data\n    //     : {};\n    const params = data;\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n  // Individual API routes\n\n\n  /** Checks user's username and the password passed with the \n   * form data and, if valid, returns a token signed with jwt.\n   * The payload is the username and password.\n   * Note that the token is also updated in this class.\n   */ \n  static async logIn(formData) {\n    const { username, password } = formData;\n    const data = {\n      username: username,\n      password: password\n    };\n \n    let res = await this.request(\n      'auth/token', \n      data,\n      'post'\n    );\n    \n    this.setToken(res.token);\n    return res.token;\n  }\n\n   /** If all data passed in formData is valid, a new user is created\n    *  and added to the database (the user table). A token is created \n    *  and signed with jwt. The payload is the username and password.\n    *  Note that the token is also updated in this class. \n   */ \n  static async signup(formData){\n    const { username, password, firstName, lastName, email } = formData; // why did I do this?? Just pass formData...\n    const data = {\n      username: username,\n      password: password,\n      firstName: firstName,\n      lastName: lastName, \n      email: email\n    };\n\n    let res = await this.request(\n      'auth/register',\n      data,\n      'post'\n    );\n\n    this.setToken(res.token);  \n    return res.token;\n  }\n\n  /** Accepts { username, firstname, lastName, email, password }\n   *  and can update { firstName, lastName, email } in the database\n   *  and will return { firstName, lastName, email }. Only username\n   *  and password are required.\n   */ \n   static async update(formData) {\n    // console.log('The formData Passed from user Profile: ', formData);\n    // check password in here, make function for this\n    const data = cloneDeep(formData);\n    // console.log('The data 1: ', data);\n    delete data.username;\n    delete data.password;\n    // console.log('The data 2: ', data);\n    // console.log('And noe fromData: ', formData);\n    \n    let res = await this.request(\n      `users/${formData.username}`, \n      data,\n      'patch'\n    );\n    console.log('The response is: ', res.user);\n    \n    return res.user;\n  }\n\n\n  /** Get details on a company by handle. */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get details on either all companies or companies \n   *  that have a similar name to data.name **/\n  static async getAllCompanies(data={}) {\n    let res = await this.request('companies/', data);\n    return res.companies;\n  }\n\n\n  /** Get details on a job by id */\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n\n  /** Get details on either all jobs or jobs \n  *  that have a similar title to data.title **/\n  static async getAllJobs(data={}) {\n    let res = await this.request('jobs/', data);\n    return res.jobs;\n  }\n\n  /** Get details on a user by username */\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n \n\n}\n\n\nexport default JoblyApi;"]},"metadata":{},"sourceType":"module"}